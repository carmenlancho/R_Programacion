---
title: "Tema 2 — Programación en R"
lang: es
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    self-contained: true 
execute:
  echo: true
  warning: false
  message: false
editor: source
fontsize: 11pt
---

# R

## ¿R?

**R** es un **lenguaje de programación** y un **entorno de software** diseñado específicamente para el análisis estadístico, la manipulación de datos y la visualización gráfica. Es un **software libre y de código abierto**, distribuido bajo la licencia **GNU GPL**, lo que significa que cualquiera puede usarlo, modificarlo y compartirlo sin costo.

Algunas de sus propiedades son:

-   **Multiplataforma** → Funciona en Windows, macOS y Linux.
-   **Altamente extensible** → Tiene más de **20,000 paquetes** en CRAN (repositorio oficial), además de repositorios como Bioconductor y GitHub.
-   **Especializado en estadística y ciencia de datos** → Incluye funciones nativas para análisis descriptivos, regresiones, modelos lineales y no lineales, series temporales, minería de datos, etc.
-   **Potente en visualización** → Herramientas gráficas integradas y librerías como `ggplot2`, o `plotly` permiten crear gráficos desde básicos hasta altamente interactivos.
-   **Comunidad activa** → Gran cantidad de foros, tutoriales, cursos y conferencias.

Entorno de R: <https://www.lcano.com/b/iser/_book/index.html>

**Tiene su curva de aprendizaje...¡se supera con la práctica! ;)**

**Truco**: mucho print

## Algunos ejemplos iniciales

-   Calculadora: en consola

-   Calculadora: en script. Diferencia entre .R y .qmd.

    ```{r}
    a <- 2
    b <- 3
    a*b
    ```

    ```{r}
    print('Hello world!')
    ```

```{r}
# print("Hola","casa","hogar") # error
print(c("Hola","casa","hogar")) 
```

```{r}
caracteres <- c("Hola","casa","hogar")
print(caracteres) 
```

## Variables y constantes

Una **variable** es un espacio de memoria al que se le da un nombre para almacenar un valor.

-   **Asignación:** se hace con `<-` (forma recomendada) o `=`.

-   **Dinámicas:** una variable puede cambiar de valor a lo largo de la ejecución del programa.

-   No es necesario declarar el tipo de dato (entero, float, etc.), R lo infiere automáticamente (en otros lenguajes hay que declararlo).

-   **Tipos:**

    -   Variables globales: se definen en el entorno principal (fuera de funciones) y se pueden usar en cualquier parte del script.

    -   Variables locales: se definen dentro de una función y solo existen allí. No “escapan” al entorno global.

Una **constante,** que también ocupa un espacio de memoria, es un valor fijo que no cambia durante la ejecución del programa. La diferencia entre constante y variable es que la constante es un valor predefinido, no puede cambiar (por ejemplo, $\pi$) y la variable puede cambiar su valor con la ejecución del programa.

```{r}
# Asignación de variables
x <- 10         
y <- 3          
nombre <- "Ana"  
pi_aprox <- 3.14 
```

```{r}
IVA <- 0.1
PRECIO_BASE <- 100
precio_final <- PRECIO_BASE * (1 + IVA)
precio_final

```

Dentro de una función:

```{r}
# Variables dentro de funciones no "escapan"
calcular_valor_final <- function(valor_base, impuesto) {
  valor_final <- valor_base * (1 + impuesto)
  return(valor_final)
}
```

La variable valor_final solo existe dentro de la función:

```{r}
#valor_final
# valor_final no existe fuera de la función
```

```{r}
calcular_valor_final(1000, 0.1)
```

```{r}
calcular_valor_final(5, 0.32)
```

Comentarios:

-   R distingue entre mayúsculas y minúsculas

-   R entiende igual las comillas simples (' ') y las dobles (" ").

-   A las variables y a las constantes se les debe poner un nombre identificativo.

-   Evitar todo tipo de caracteres (tildes, diéresis, ñ, etc.).

-   No pueden comenzar por caracteres ni contener espacios.

    -   Pon ejemplos válidos y no válidos de nombres de variables y constantes.

-   No se deben usar palabras reservadas de R

    ```{r}
    help(reserved)
    ```

### Ejercicios

1.  Pon ejemplos válidos y no válidos de nombres de variables y constantes.

    ```{r}
    apañarse <- 7 # sí es válido pero es mejor no utilizar tildes y caracteres específicos de un idioma
    # 7a <- 6 # no podemos empezar por un número
    # $d <- 5 # no se puede empezar con dolar
    # Num piezas <- 10 # no puede haber un espacio
    NumPiezas <- 10 # Num_piezas, num.piezas

    ```

2.  Crea tres variables: tu nombre, tu edad y tu ciudad. Muéstralas en pantalla.

3.  Declara una constante `PI = 3.1416` y calcula el área de un círculo de radio 5 (área = $\pi r^{2}$).

4.  Crea dos precios y calcula el precio final con IVA = 0.21.

5.  Usa variables `base` y `altura` para calcular el área de un triángulo (área = (base $\cdot$ altura)/2).

6.  Implementa `salario_neto(bruto, tasa = 0.15)` que retorne el neto tras impuestos.

::: {.callout-tip collapse="true"}
## **Soluciones sugeridas**

```{r}
nombre <- "Ana"; edad <- 21; ciudad <- "CDMX"
nombre; edad; ciudad

PI <- 3.1416; radio <- 5; area <- PI * radio^2; area

precio1 <- 120; precio2 <- 80; IVA <- 0.21
total <- (precio1 + precio2) * (1 + IVA); total

base <- 10; altura <- 6; (base * altura) / 2

salario_neto <- function(bruto, tasa = 0.15){ bruto * (1 - tasa)}
salario_neto(1000)
```
:::

------------------------------------------------------------------------

## Tipos de datos y objetos

R cuenta con **tipos de datos** y **estructuras de datos (u objetos)**.

**Tipos de datos principales:**

-   Datos numéricos: números reales y complejos.

    -   `numeric`: números decimales (ej. `3.14`)

    -   `integer`: enteros (ej. `5L`, la L indica “integer”)

    -   `complex`: números complejos (ej. `2+3i`)

-   Caracteres: cadenas de texto representadas entre comillas.

    -   `character`: texto o cadenas de caracteres

-   Datos lógicos: únicamente pueden tomar 2 valores: TRUE, FALSE

    -   `logical`: valores lógicos (`TRUE` / `FALSE`)

```{r}
num <- 3.14
ent <- 5L # con la L le decimos que es un entero
logi <- FALSE
txt <- "Hola"
comp <- 2 + 3i

class(num); class(ent); class(logi); class(txt); class(comp)
```

**Estructuras más comunes:**

-   **vector**: Colección ordenada de datos con una longitud determinada.

-   **matrix**: estructura bidimensional (con filas y columnas) que almacena elementos del mismo tipo de dato

-   **list**: Objeto que recoge varios tipos de elementos (componentes), que pueden ser de clases diferentes.

-   **factor**: variable categórica con niveles.

-   **data.frame**: Estructuras de datos bidimensionales, donde se recogen diferentes variables por columnas. Es una estructura tabular heterogénea.

```{r}
# Vectores (todos los elementos del mismo tipo)
v_num <- c(1, 2, 3.5)
v_chr <- c("a", "b", "c")
v_log <- c(TRUE, FALSE, TRUE)

length(v_num); class(v_num)

# Si combinamos tipos de datos, R los entenderá del mismo tipo
# Por ejemplo, en el siguiente caso entiende 1 como caracter
c(1,'beta')
```

¿Cuál es la diferencia entre el objeto matrix y el objeto data.frame?

```{r}
# Matriz: 2D del mismo tipo
m <- matrix(1:6, nrow = 2, ncol = 3)   # rellena por columnas
m

# Lista: contenedor heterogéneo
lst <- list(id = 1L, nombre = "Ana", notas = c(8.5, 9, 10))
lst$nombre; lst$notas

# Data frame: tabla (cada columna puede ser de distinto tipo)
df <- data.frame(
  id = 1:3,
  nombre = c("Ana", "Luis", "Eva"),
  nota = c(9.1, 8.3, 7.5)
)
str(df); df$nombre
```

```{r}
# Factor: categorías con niveles (útil para modelos y gráficos)
sexo <- factor(c("M", "F", "F", "M"), levels = c("F", "M"))
sexo; levels(sexo)

# Coerción (cambio de tipo) y cuidado con NAs
as.numeric("10")        # 10
as.numeric(c("10", "x"))# 10 NA (warning)
as.character(1:3)       # "1" "2" "3"

```

